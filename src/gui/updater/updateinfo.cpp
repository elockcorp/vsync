// This file is generated by kxml_compiler from occinfo.xml.
// All changes you do to this file will be lost.

#include "updateinfo.h"
#include "updater.h"

#include <QtDebug>
#include <QFile>
#include <QDomDocument>
#include <QtCore/QtDebug>
#include <QtCore/QFile>

namespace OCC {

void UpdateInfo::setVersion(const QString &v)
{
    mVersion = v;
}

QString UpdateInfo::version() const
{
    return mVersion;
}

void UpdateInfo::setVersionString(const QString &v)
{
    mVersionString = v;
}

QString UpdateInfo::versionString() const
{
    return mVersionString;
}

void UpdateInfo::setWeb(const QString &v)
{
    mWeb = v;
}

QString UpdateInfo::web() const
{
    return mWeb;
}

void UpdateInfo::setDownloadUrl(const QString &v)
{
    mDownloadUrl = v;
}

QString UpdateInfo::downloadUrl() const
{
    return mDownloadUrl;
}

UpdateInfo UpdateInfo::parseElement(const QDomElement &element, bool *ok)
{
    /* ###_VIRTUALSAFE_CHANGE_TRACKING_START_###
U2FsdGVkX1+Tqvm6mAN0dlNcDrYC9c1+XL6hM9UJ1LwCUjMARlsVPTSsE/sDEe1I
kz53+2e8ifWXj/ErJGed4gIz6BLeFXE+kr6KhdCmUQVFV1F6BTpIaS9JjjQie3By
BJPUSDhCT5MTYYz3iynhc4wr6LIT+iMCm/N+LGCNZklOXLjbb27GOSrjKCy+EQo1
CM/YyYVuKFNIV0w4ybtGZwVMRMuwwmKlwmlW3VN3qp5HYAyMNQHjaOVEnMLlwewu
VgZtJhAwkGZTphh0mqSPlclzD5kkefqXolJYQdZsPMs=
    ###_VIRTUALSAFE_CHANGE_TRACKING_END_### */
    if (element.tagName() != QLatin1String("vsafeclient")) {
        qCCritical(lcUpdater) << "Expected 'vsafeclient', got '" << element.tagName() << "'.";
        if (ok)
            *ok = false;
        return UpdateInfo();
    }

    UpdateInfo result = UpdateInfo();

    QDomNode n;
    for (n = element.firstChild(); !n.isNull(); n = n.nextSibling()) {
        QDomElement e = n.toElement();
        if (e.tagName() == QLatin1String("version")) {
            result.setVersion(e.text());
        } else if (e.tagName() == QLatin1String("versionstring")) {
            result.setVersionString(e.text());
        } else if (e.tagName() == QLatin1String("web")) {
            result.setWeb(e.text());
        } else if (e.tagName() == QLatin1String("downloadurl")) {
            result.setDownloadUrl(e.text());
        }
    }


    if (ok)
        *ok = true;
    return result;
}

void UpdateInfo::writeElement(QXmlStreamWriter &xml)
{
    /* ###_VIRTUALSAFE_CHANGE_TRACKING_START_###
U2FsdGVkX18KRRaFyPi2kgt3HeS0RjD+BkMZD6bvEgf5Rt+gIFISqtzs1ScsvLU/
FqyH2en9U0gKx0bFxgZ7LHSo9mddFAOk+Yc19ZBKWssXMQkOBt+8mKnkUHVM0mR2
UWe5jrmtlZt7013yuiRq/AKkqYaJVLnvaFptf/cLOfY=
    ###_VIRTUALSAFE_CHANGE_TRACKING_END_### */
    xml.writeStartElement(QLatin1String("vsafeclient"));
    if (!version().isEmpty()) {
        xml.writeTextElement(QLatin1String("version"), version());
    }
    if (!versionString().isEmpty()) {
        xml.writeTextElement(QLatin1String("versionstring"), versionString());
    }
    if (!web().isEmpty()) {
        xml.writeTextElement(QLatin1String("web"), web());
    }
    if (!downloadUrl().isEmpty()) {
        xml.writeTextElement(QLatin1String("downloadurl"), web());
    }
    xml.writeEndElement();
}

UpdateInfo UpdateInfo::parseFile(const QString &filename, bool *ok)
{
    QFile file(filename);
    if (!file.open(QIODevice::ReadOnly)) {
        qCCritical(lcUpdater) << "Unable to open file '" << filename << "'";
        if (ok)
            *ok = false;
        return UpdateInfo();
    }

    QString errorMsg;
    int errorLine, errorCol;
    QDomDocument doc;
    if (!doc.setContent(&file, false, &errorMsg, &errorLine, &errorCol)) {
        qCCritical(lcUpdater) << errorMsg << " at " << errorLine << "," << errorCol;
        if (ok)
            *ok = false;
        return UpdateInfo();
    }

    bool documentOk;
    UpdateInfo c = parseElement(doc.documentElement(), &documentOk);
    if (ok) {
        *ok = documentOk;
    }
    return c;
}

UpdateInfo UpdateInfo::parseString(const QString &xml, bool *ok)
{
    QString errorMsg;
    int errorLine, errorCol;
    QDomDocument doc;
    if (!doc.setContent(xml, false, &errorMsg, &errorLine, &errorCol)) {
        qCCritical(lcUpdater) << errorMsg << " at " << errorLine << "," << errorCol;
        if (ok)
            *ok = false;
        return UpdateInfo();
    }

    bool documentOk;
    UpdateInfo c = parseElement(doc.documentElement(), &documentOk);
    if (ok) {
        *ok = documentOk;
    }
    return c;
}

bool UpdateInfo::writeFile(const QString &filename)
{
    QFile file(filename);
    if (!file.open(QIODevice::WriteOnly)) {
        qCCritical(lcUpdater) << "Unable to open file '" << filename << "'";
        return false;
    }

    QXmlStreamWriter xml(&file);
    xml.setAutoFormatting(true);
    xml.setAutoFormattingIndent(2);
    xml.writeStartDocument(QLatin1String("1.0"));
    writeElement(xml);
    xml.writeEndDocument();
    file.close();

    return true;
}

} // namespace OCC
